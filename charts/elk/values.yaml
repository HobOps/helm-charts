common-library:
  DaemonSet:
    elk-sysctl:
      selectorLabels:
        app: elk-sysctl
      image:
        repository: busybox
        tag: 1.26.2
      nodeSelector: {}
      command:
      - sh
      - -c
      args:
      - sysctl -w vm.max_map_count=262166 && while true; do sleep 86400; done
      securityContext:
        allowPrivilegeEscalation: true
        capabilities: {}
        privileged: true
        readOnlyRootFilesystem: false
        runAsNonRoot: false
  StatefulSet:
    elk:
      annotations:
        reloader.stakater.com/auto: "true"
      replicas: 1
      selectorLabels:
        app: elk
      image:
        repository: sebp/elk
        tag: 7.10.0
      nodeSelector: {}
      command:
      - sh
      - -c
      args:
      - /usr/local/bin/start.sh
      envFrom:
      - configMapRef:
          name: elk-config-vars
      service:
        ports:
        - name: logstash
          port: 5044
          protocol: TCP
        - name: logstash-tls
          port: 5045
          protocol: TCP
        - name: kibana
          port: 5601
          protocol: TCP
        - name: elasticsearch
          port: 9200
          protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9200
          scheme: HTTP
        initialDelaySeconds: 120
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9200
          scheme: HTTP
        initialDelaySeconds: 120
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      volumeMounts:
      - mountPath: /var/lib/elasticsearch
        name: elasticsearch-data
      - mountPath: /tls/
        name: logstash-cert
      - mountPath: /etc/logstash/conf.d/
        name: logstash-conf
      volumes:
      - name: logstash-cert
        secret:
          defaultMode: 292
          optional: false
          secretName: logstash-cert
      - configMap:
          defaultMode: 292
          name: logstash-conf
          optional: false
        name: logstash-conf
      volumeClaimTemplates:
      - metadata:
          name: elasticsearch-data
        spec:
          accessModes:
          - ReadWriteOnce
          storageClassName: local-path
          resources:
            requests:
              storage: 32Gi
    apm-server:
      replicas: 1
      selectorLabels:
        app: apm-server
      image:
        repository: docker.elastic.co/apm/apm-server
        tag: 7.10.0
      service:
        ports:
        - name: apm-server
          port: 8200
          protocol: TCP
      envFrom:
      - secretRef:
          name: apm-server-token
      volumes:
      - name: apm-server-conf
        configMap:
          name: apm-server-conf
          defaultMode: 292
      volumeMounts:
      - mountPath: /usr/share/apm-server/apm-server.yml
        name: apm-server-conf
        subPath: apm-server.yml
  Service:
    logstash-external:
      selectorLabels:
        app: elk
      type: LoadBalancer
      externalTrafficPolicy: Local
      ports:
      - name: logstash-tls
        port: 5045
        protocol: TCP
  ConfigMap:
    logstash-conf:
      data:
        02-beats-input.conf: |-
          input {
            beats {
              port => 5044
              ssl => false
            }
            beats {
              port => 5045
              ssl => true
              ssl_certificate_authorities => ["/tls/ca.crt"]
              ssl_certificate => "/tls/tls.crt"
              ssl_key => "/tls/tls.key"
              ssl_verify_mode => "force_peer"
            }
          }
        10-syslog.conf: |-
          filter {
            if [type] == "syslog" {
              grok {
                match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
                add_field => [ "received_at", "%{@timestamp}" ]
                add_field => [ "received_from", "%{host}" ]
              }
              syslog_pri { }
              date {
                match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
              }
            }
          }
        11-nginx.conf: |-
          filter {
            if [type] == "nginx-access" {
              grok {
                match => { "message" => "%{NGINXACCESS}" }
              }
            }
          }
        30-output.conf: |-
          output {
            elasticsearch {
              hosts => ["elk"]
              manage_template => false
              index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
            }
          }
    elk-config-vars:
      data:
        LOGSTASH_START: "1"
        ES_HEAP_SIZE: 1024m
        LS_HEAP_SIZE: 1024m
        ES_CONNECT_RETRY: "100"
        NODE_OPTIONS: --max-old-space-size=512
        TZ: Etc/UTC
    apm-server-conf:
      data:
        apm-server.yml: |-
          ################### APM Server Configuration #########################
          apm-server:
            host: "0.0.0.0:8200"
            secret_token: '${APM_SECRET_TOKEN}'
            ssl:
              enabled: false
            kibana:
              enabled: true
              host: "elk:5601"
              ssl.enabled: false
          #============================== Template =====================================
          setup.template.enabled: true
          setup.template.name: "apm-%{[observer.version]}"
          setup.template.pattern: "apm-%{[observer.version]}-*"
          setup.template.fields: "${path.config}/fields.yml"
          setup.template.overwrite: true
          setup.template.settings:
            index:
              number_of_shards: 1
              codec: best_compression
              number_of_routing_shards: 30
              mapping.total_fields.limit: 2000
          #-------------------------- Elasticsearch output ------------------------------
          output.elasticsearch:
            hosts: ["elk:9200"]
            enabled: true
            compression_level: 0
            indices:
            - index: "apm-%{[observer.version]}-sourcemap"
              when.contains:
                processor.event: "sourcemap"
            - index: "apm-%{[observer.version]}-error-%{+yyyy.MM.dd}"
              when.contains:
                processor.event: "error"
            - index: "apm-%{[observer.version]}-transaction-%{+yyyy.MM.dd}"
              when.contains:
                processor.event: "transaction"
            - index: "apm-%{[observer.version]}-span-%{+yyyy.MM.dd}"
              when.contains:
                processor.event: "span"
            - index: "apm-%{[observer.version]}-metric-%{+yyyy.MM.dd}"
              when.contains:
                processor.event: "metric"
            - index: "apm-%{[observer.version]}-onboarding-%{+yyyy.MM.dd}"
              when.contains:
                processor.event: "onboarding"
  Ingress:
    elk:
      annotations:
        nginx.ingress.kubernetes.io/auth-realm: Authentication Required
        nginx.ingress.kubernetes.io/auth-secret: elk-http-auth
        nginx.ingress.kubernetes.io/auth-type: basic
      render_ingress_rules: true
      render_ingress_tls: true
      hosts:
      - logs.example.com
      paths:
      - path: /
        backend:
          service:
            name: elk
            port:
              name: kibana
        pathType: ImplementationSpecific
    apm:
      annotations: {}
      render_ingress_rules: true
      render_ingress_tls: true
      hosts:
      - elasticapm.example.com
      paths:
      - path: /
        backend:
          service:
            name: apm-server
            port:
              name: apm-server
        pathType: ImplementationSpecific
  Secret:
    # To create a new secret, run the following command:
    # htpasswd -B -n admin
    elk-http-auth:
      stringData:
        auth: admin:$2y$05$0VgWLiNLA0j919QZh8eFzujUBsC3dN8gDeS51hfFJK9yRI0rQv1y
    apm-server-token:
      stringData:
        APM_SECRET_TOKEN: changeme
    logstash-cert:
      type: kubernetes.io/tls
      stringData: {}